{"version":3,"sources":["faucet/TokenSelect.tsx","components/alert.tsx","domain/models.ts","faucet/PublicKeyLoggedIn.tsx","faucet/WalletConnector.tsx","abis/balance-abi.ts","domain/hooks/useRefreshBalance.ts","faucet/Balances.tsx","abis/mint-abi.ts","faucet/GetTestTokensButton.tsx","faucet/Faucet.tsx","App.tsx","reportWebVitals.ts","domain/Store.ts","domain/actions.ts","domain/initialState.ts","index.tsx"],"names":["TokenImg","styled","img","MenuItemContent","div","useStyles","makeStyles","root","height","color","backgroundColor","border","fontSize","TokenSelect","observer","classes","store","useDataStore","onChangeHandler","useCallback","event","setCurrentToken","target","value","Select","variant","displayEmpty","className","currentToken","onChange","MenuItem","disabled","tokens","map","token","src","alt","Box","ml","AlertDialog","props","isOpen","onButtonClicked","text","title","Dialog","open","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","autoFocus","Token","CloseButton","IconButton","PublicKeyLoggedIn","handleDisconnet","a","window","web3Modal","clearCachedProvider","setPublicKey","Grid","container","item","xs","alignItems","justifyContent","Typography","publicKey","slice","ConnectWalletButton","ButtonText","Web3Modal","network","cacheProvider","WalletConnector","useState","isErrorAlertOpen","setIsErrorAlertOpen","handleConnectWallet","connect","provider","web3","Web3","eth","getAccounts","accounts","web3Provider","balanceAbi","useRefreshBalance","tokenAddresses","contractAddress","Contract","methods","balanceOf","call","then","balance","setBalance","BalancesStyled","Balances","balances","refreshBalance","useEffect","USDT","EYWA","mintAbi","inputs","internalType","name","type","payable","stateMutability","StyledButton","GetTestTokensButton","onClickHandler","mint","send","from","response","console","log","Root","Title","Body","Label","Row","Faucet","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","state","extendObservable","this","initialState","action","createStore","StoreContext","React","createContext","DataStoreProvider","children","useLocalStore","Provider","useContext","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00a6d52b.chunk.js","sourcesContent":["import { Box, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport {useDataStore} from \"../index\";\nimport React, {useCallback} from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport styled from \"@emotion/styled\";\n\nconst TokenImg = styled.img`\n  width: 32px;\n  height: 32px;\n`\n\nconst MenuItemContent = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    font-family: Rubik;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 19px;\n`\n\nconst useStyles = makeStyles({\n  root: {\n    height: 32,\n    color: '#fff',\n    backgroundColor: 'transparent',\n    '& .MuiOutlinedInput-notchedOutline': {\n      border: 'none',\n    },\n    '& .MuiSelect-selectMenu': {\n      fontSize: 14,\n    },\n    '& .MuiSelect-select:focus': {\n      backgroundColor: 'unset',\n    },\n    '& .MuiSelect-icon': {\n      color: 'white',\n    },\n  },\n});\n\nexport const TokenSelect = observer(() => {\n  const classes = useStyles();\n  const store = useDataStore();\n  const onChangeHandler = useCallback((event) => {\n    store.setCurrentToken(event.target.value)\n  }, []);\n  return (\n    <Select\n      variant=\"outlined\"\n      displayEmpty\n      className={classes.root}\n      value={store.currentToken}\n      onChange={onChangeHandler}\n    >\n      <MenuItem value=\"\" disabled>\n        Select Token\n      </MenuItem>\n      {store.tokens.map(token => (\n        <MenuItem key={token} value={token}>\n          <MenuItemContent>\n            <TokenImg src={`./assets/img/${token}.svg`} alt={token} />\n            <Box ml={1}>{token}</Box>\n          </MenuItemContent>\n        </MenuItem>\n      ))}\n    </Select>\n  );\n});","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\ninterface Props {\n    title?: string;\n    text: string;\n    isOpen: boolean;\n    onButtonClicked: () => void;\n}\n\nexport function AlertDialog(props: Props) {\n    const {isOpen, onButtonClicked, text, title} = props;\n\n    return (\n        <Dialog open={isOpen}>\n                {\n                    title && (\n                        <DialogTitle>\n                            {title}\n                        </DialogTitle>\n                    )\n                }\n\n                <DialogContent>\n                    <DialogContentText>\n                        {text}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onButtonClicked} autoFocus>\n                        OK\n                    </Button>\n                </DialogActions>\n        </Dialog>\n    );\n}","export enum Token {\n    USDT= 'USDT',\n    EYWA='EYWA',\n}","import React from 'react';\nimport { Grid, IconButton, makeStyles, Typography } from '@material-ui/core';\nimport {useDataStore} from \"../index\";\nimport styled from \"@emotion/styled\";\nimport {observer} from \"mobx-react-lite\";\n\nconst CloseButton = styled(IconButton)`\n    margin: -12px;\n`\n\nexport const PublicKeyLoggedIn = observer(() => {\n\n    const store = useDataStore();\n    const handleDisconnet = async () => {\n        await (window as any).web3Modal.clearCachedProvider();\n        store.setPublicKey('');\n    };\n    return (\n        <Grid container item xs={4}  alignItems=\"center\" justifyContent=\"space-between\">\n            <img src=\"./assets/img/metamask.svg\" alt=\"meta mask\" />\n            <Typography>\n                {`${store.publicKey.slice(0, 5)}.....${store.publicKey.slice(-4)}`}\n            </Typography>\n            <CloseButton onClick={handleDisconnet}>\n                <img src=\"./assets/img/close.svg\" alt=\"close mask\" />\n            </CloseButton>\n        </Grid>\n    )\n});","import Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport {useDataStore} from \"../index\";\nimport {observer} from \"mobx-react-lite\";\nimport styled from \"@emotion/styled\";\nimport React, {useState} from \"react\";\nimport {AlertDialog} from \"../components/alert\";\nimport {PublicKeyLoggedIn} from \"./PublicKeyLoggedIn\";\n\nconst ConnectWalletButton = styled.div`\n    height: 56px;\n    width: 192px;\n    border-radius: 8px;\n    background-color: #0CCFAC;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    '&:hover': {\n      background-color: #0ACCA9;\n    },\n`\n\nconst ButtonText = styled.div`\n    font-family: Rubik;\n    font-style: normal;\n    font-weight: 500;\n    font-size: 14px;\n    line-height: 17px;\n    color: #FFFFFF;\n`\n\nconst web3Modal = new Web3Modal({\n  network: \"rinkeby\",\n  cacheProvider: true,\n});\n\nexport const WalletConnector = observer(() => {\n  const store = useDataStore();\n  \n  const [isErrorAlertOpen, setIsErrorAlertOpen] = useState<boolean>(false);\n\n  const handleConnectWallet = async () => {\n    try {\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      const accounts = await web3.eth.getAccounts();\n      store.setPublicKey(accounts?.[0]);\n      (window as any).web3 = web3;\n      (window as any).web3Modal = web3Modal;\n      (window as any).web3Provider = provider;\n      //routing.push('/get-test-tokens');\n    }\n    catch (e) {\n      setIsErrorAlertOpen(true);\n    }\n\n  };\n\n  return (\n      <>\n        {\n          store.publicKey ? (\n            <PublicKeyLoggedIn/>\n          )\n          : (\n            <ConnectWalletButton onClick={handleConnectWallet}>\n              <ButtonText>Connect Wallet</ButtonText>\n            </ConnectWalletButton>\n          )\n        }\n\n        <AlertDialog isOpen={isErrorAlertOpen} onButtonClicked={() => setIsErrorAlertOpen(false)}\n                     text={'Please make sure MetaMask is installed.'}/>\n      </>\n  );\n});","export const balanceAbi = [\n{\n  \"inputs\": [{\"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\"}],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n},];","import {useDataStore} from \"../../index\";\nimport {Token} from \"../models\";\nimport {balanceAbi} from \"../../abis/balance-abi\";\n\nexport const useRefreshBalance = () => {\n    const store = useDataStore();\n    const {tokenAddresses, publicKey} = store;\n    return (token: Token) => {\n        const contractAddress = tokenAddresses[token];\n        const tokenContract = new window.web3.eth.Contract(balanceAbi, contractAddress);\n        tokenContract.methods.balanceOf(publicKey).call().then((balance: number) => {\n            store.setBalance(token, balance);\n        });\n    };\n};","import React, {useEffect} from 'react';\nimport styled from \"@emotion/styled\";\nimport {observer} from \"mobx-react-lite\";\nimport {useDataStore} from \"../index\";\nimport {Token} from \"../domain/models\";\nimport {useRefreshBalance} from \"../domain/hooks/useRefreshBalance\";\n\nconst BalancesStyled = styled.div`\n    text-align: right;\n    color: #959EBD;\n    font-size: 14px;\n`\n\nexport const Balances = observer(() => {\n    const store = useDataStore();\n    const {balances} = store;\n    const refreshBalance = useRefreshBalance();\n    useEffect(() => {\n        refreshBalance(Token.USDT);\n        refreshBalance(Token.EYWA);\n    }, []);\n    if(!store.publicKey){\n        return null;\n    }\n    return (\n        <BalancesStyled>\n            EYWA balance: {balances[Token.EYWA]}; USDT balance: {balances[Token.USDT]}\n        </BalancesStyled>\n    )\n});","export const mintAbi = [\n  {\n    inputs: [\n      { internalType: 'address', name: 'rec', type: 'address', },\n      { internalType: 'uint256', name: 'amount', type: 'uint256', },\n    ],\n    name: 'mint',\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];","import React, {useCallback, useEffect} from 'react';\nimport styled from \"@emotion/styled\";\nimport {useDataStore} from \"../index\";\nimport {Token} from \"../domain/models\";\nimport {balanceAbi} from \"../abis/balance-abi\";\nimport {mintAbi} from \"../abis/mint-abi\";\nimport {useRefreshBalance} from \"../domain/hooks/useRefreshBalance\";\n\nconst StyledButton = styled.div`\n    height: 56px;\n    width: 100%;\n    margin-top: 10px;\n    border-radius: 8px;\n    background-color: #0CCFAC;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    font-size: 14px;\n    '&:hover': {\n      background-color: #0ACCA9;\n    },\n`\n\nexport const GetTestTokensButton = () => {\n    const store = useDataStore();\n    const {tokenAddresses, publicKey, currentToken} = store;\n    const refreshBalance = useRefreshBalance();\n    const onClickHandler = useCallback(() => {\n        const contractAddress = tokenAddresses[currentToken];\n        const tokenContract = new window.web3.eth.Contract(mintAbi, contractAddress);\n        tokenContract.methods.mint(publicKey, 1)\n            .send({ from: publicKey })\n            .then((response: any) => {\n            console.log(response);\n            refreshBalance(currentToken);\n        });\n    }, [currentToken, publicKey]);\n    if(!store.publicKey){\n        return null;\n    }\n    return (\n        <StyledButton onClick={onClickHandler}>\n            GET TEST TOKENS\n        </StyledButton>\n    )\n}","import styled from \"@emotion/styled\";\nimport React, {useCallback} from 'react';\nimport {useDataStore} from \"../index\";\nimport {Token} from \"../domain/models\";\nimport {observer} from \"mobx-react-lite\";\nimport {TokenSelect} from \"./TokenSelect\";\nimport {WalletConnector} from \"./WalletConnector\";\nimport {Balances} from \"./Balances\";\nimport {GetTestTokensButton} from \"./GetTestTokensButton\";\n\n\nconst Root = styled.div`\n    background-color: #191332;\n    height: 200px;\n    width: 576px;\n    border-radius: 8px;\n    padding: 20px 24px 24px 24px;\n    margin-top: 112px;\n`;\n\nconst Title = styled.div`\n    text-align: center;\n    color: white;\n    font-size: 14px;\n    margin-bottom: 19px;\n`;\n\nconst Body = styled.div`\n    padding: 12px 16px;\n    background: #191332;\n    border: 1px solid #29294D;\n    box-sizing: border-box;\n    border-radius: 8px;\n`;\nconst Label = styled.div`\n    color: #959EBD;\n    font-family: Rubik;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 17px;\n    /* identical to box height */\n    display: flex;\n    align-items: center;\n\n`;\nconst Row = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding-top: 23px;\n    padding-bottom: 24px;\n`;\n\n\nexport const Faucet = observer(() => {\n    const store = useDataStore();\n    return (\n        <Root>\n            <Title>\n                FAUCET\n            </Title>\n            <Body>\n                <Label>Ethereum Rinkeby</Label>\n                <Row>\n                    <TokenSelect/>\n                    <WalletConnector/>\n                </Row>\n                {\n                    store.publicKey && (\n                        <>\n                            <Balances/>\n                            <GetTestTokensButton/>\n                        </>\n                    )\n                }\n\n            </Body>\n        </Root>\n    );\n})","import React from 'react';\nimport './App.css';\nimport {Faucet} from \"./faucet/Faucet\";\n\nconst App = () =>\n    (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Faucet/>\n            </header>\n        </div>\n    );\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendObservable } from 'mobx';\nimport {initialState} from \"./initialState\";\nimport {Actions, actions} from \"./actions\";\nimport {State} from \"./State\";\nimport {Token} from \"./models\";\n\n\nexport class Store  implements State, Actions {\n  constructor() {\n    extendObservable(this, {\n      ...initialState(),\n      ...actions(this)\n    });\n  }\n\n  balances!: Record<Token, number>;\n  tokenAddresses!: Record<Token, string>;\n  currentToken!: Token;\n  publicKey!: string;\n  tokens!: Token[];\n\n  setCurrentToken!: (token: Token) => void;\n  setPublicKey!: (publicKey: string) => void;\n  setBalance!: (token: Token, balance: number)  => void;\n}\n\nexport const store = new Store();\n\nexport function createStore() {\n  return store;\n}\n","import { action } from 'mobx';\nimport {State} from \"./State\";\nimport {Token} from \"./models\";\n\nexport interface Actions {\n  setCurrentToken: (token: Token) => void;\n  setPublicKey: (publicKey: string) => void;\n  setBalance: (token: Token, balance: number)  => void;\n}\n\nexport const actions = (state: State): Actions => ({\n  setCurrentToken: action((token: Token) => {\n    state.currentToken = token;\n  }),\n  setPublicKey: action( (publicKey: string) => {\n    state.publicKey = publicKey;\n  }),\n  setBalance: action((token: Token, balance: number) => {\n    state.balances[token] = balance;\n  }),\n});","import {State} from \"./State\";\nimport {Token} from \"./models\";\n\nexport const initialState: (data:{} | void)=>State = (data = {}) => ({\n  tokens: [ Token.USDT, Token.EYWA],\n  balances: {\n    [Token.USDT]: 0,\n    [Token.EYWA]: 0,\n  },\n  tokenAddresses: {\n    [Token.USDT]: '0xa9E233E2c06fbAFf7d1D913060d5F4e159092414',\n    [Token.EYWA]: '0x08Ffcb0Ca216Bb3C12855910Ee4014191D81eeba',\n  },\n  currentToken: Token.USDT,\n  publicKey: '',\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useLocalStore } from 'mobx-react-lite';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore, Store} from \"./domain/Store\";\n\nconst StoreContext = React.createContext<Store | null>(null);\n\nexport const DataStoreProvider = ({ children }: any) => {\n    const store = useLocalStore(createStore);\n    return <StoreContext.Provider value={store}>{children}. </StoreContext.Provider>;\n};\nexport const useDataStore = () => {\n    const store = React.useContext(StoreContext);\n    if (!store) {\n        throw new Error('useStore must be used within a StoreProvider.');\n    }\n    return store;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n      <DataStoreProvider>\n          <App />\n      </DataStoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}